"use strict";
var logger, path, _;

_ = require("lodash");

path = require('path');

logger = require('logmimosa');

exports.defaults = function() {
  return {
    bless: {
      options: {
        cacheBuster: true,
        cleanup: true,
        compress: false,
        force: false,
        imports: true
      },
      files: [],
      blessOnWatch: true
    }
  };
};

exports.placeholder = function() {
  return "\t\n#bless:\n#  options:\n#    cacheBuster: true,\n#    cleanup: true,\n#    compress: false,\n#    force: false,\n#    imports: true\n#  files: []\n#  blessOnWatch: true #turn this off if it goes slow for large code bases during watch mode";
};

exports.validate = function(config, validators) {
  var bless, errors, files, objectNotArray, options;
  errors = [];
  bless = config.bless;
  objectNotArray = function(obj) {
    return (_.isObject(obj)) && (!_.isArray(obj));
  };
  if (!((bless != null) && objectNotArray(bless))) {
    errors.push("bless config");
    return errors;
  }
  options = bless.options, files = bless.files;
  if (!((options != null) && objectNotArray(options))) {
    errors.push("bless.options");
    return errors;
  }
  if (!((files != null) && _.isArray(files))) {
    errors.push("bless.files");
    return errors;
  }
  return errors;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3NtaXRobS9kZXYvbWltb3NhLWJsZXNzL2xpYi9jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvc21pdGhtL2Rldi9taW1vc2EtYmxlc3Mvc3JjL2NvbmZpZy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBQSxDQUFBO0FBQUEsSUFBQSxlQUFBOztBQUFBLENBRUEsR0FBSSxPQUFBLENBQVEsUUFBUixDQUZKLENBQUE7O0FBQUEsSUFHQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBSFAsQ0FBQTs7QUFBQSxNQUlBLEdBQVMsT0FBQSxDQUFRLFdBQVIsQ0FKVCxDQUFBOztBQUFBLE9BTU8sQ0FBQyxRQUFSLEdBQW1CLFNBQUEsR0FBQTtTQUNqQjtBQUFBLElBQUEsS0FBQSxFQUNFO0FBQUEsTUFBQSxPQUFBLEVBQ0U7QUFBQSxRQUFBLFdBQUEsRUFBYSxJQUFiO0FBQUEsUUFDQSxPQUFBLEVBQVMsSUFEVDtBQUFBLFFBRUEsUUFBQSxFQUFVLEtBRlY7QUFBQSxRQUdBLEtBQUEsRUFBTyxLQUhQO0FBQUEsUUFJQSxPQUFBLEVBQVMsSUFKVDtPQURGO0FBQUEsTUFNQSxLQUFBLEVBQU8sRUFOUDtBQUFBLE1BT0EsWUFBQSxFQUFjLElBUGQ7S0FERjtJQURpQjtBQUFBLENBTm5CLENBQUE7O0FBQUEsT0FpQk8sQ0FBQyxXQUFSLEdBQXNCLFNBQUEsR0FBQTtTQUNwQixtUEFEb0I7QUFBQSxDQWpCdEIsQ0FBQTs7QUFBQSxPQStCTyxDQUFDLFFBQVIsR0FBbUIsU0FBQyxNQUFELEVBQVMsVUFBVCxHQUFBO0FBQ2pCLE1BQUEsNkNBQUE7QUFBQSxFQUFBLE1BQUEsR0FBUyxFQUFULENBQUE7QUFBQSxFQUNDLFFBQVMsT0FBVCxLQURELENBQUE7QUFBQSxFQUdBLGNBQUEsR0FBaUIsU0FBQyxHQUFELEdBQUE7V0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFGLENBQVcsR0FBWCxDQUFELENBQUEsSUFBcUIsQ0FBQyxDQUFBLENBQUUsQ0FBQyxPQUFGLENBQVUsR0FBVixDQUFGLEVBQTlCO0VBQUEsQ0FIakIsQ0FBQTtBQUtBLEVBQUEsSUFBQSxDQUFBLENBQU8sZUFBQSxJQUFXLGNBQUEsQ0FBZSxLQUFmLENBQWxCLENBQUE7QUFDRSxJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksY0FBWixDQUFBLENBQUE7QUFDQSxXQUFPLE1BQVAsQ0FGRjtHQUxBO0FBQUEsRUFTQyxnQkFBQSxPQUFELEVBQVUsY0FBQSxLQVRWLENBQUE7QUFXQSxFQUFBLElBQUEsQ0FBQSxDQUFPLGlCQUFBLElBQWEsY0FBQSxDQUFlLE9BQWYsQ0FBcEIsQ0FBQTtBQUNFLElBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxlQUFaLENBQUEsQ0FBQTtBQUNBLFdBQU8sTUFBUCxDQUZGO0dBWEE7QUFlQSxFQUFBLElBQUEsQ0FBQSxDQUFPLGVBQUEsSUFBVyxDQUFDLENBQUMsT0FBRixDQUFVLEtBQVYsQ0FBbEIsQ0FBQTtBQUNFLElBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxhQUFaLENBQUEsQ0FBQTtBQUNBLFdBQU8sTUFBUCxDQUZGO0dBZkE7U0FzQkEsT0F2QmlCO0FBQUEsQ0EvQm5CLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5fID0gcmVxdWlyZSBcImxvZGFzaFwiXG5wYXRoID0gcmVxdWlyZSAncGF0aCdcbmxvZ2dlciA9IHJlcXVpcmUgJ2xvZ21pbW9zYSdcblxuZXhwb3J0cy5kZWZhdWx0cyA9IC0+XG4gIGJsZXNzOlxuICAgIG9wdGlvbnM6XG4gICAgICBjYWNoZUJ1c3RlcjogdHJ1ZSxcbiAgICAgIGNsZWFudXA6IHRydWUsXG4gICAgICBjb21wcmVzczogZmFsc2UsXG4gICAgICBmb3JjZTogZmFsc2UsXG4gICAgICBpbXBvcnRzOiB0cnVlXG4gICAgZmlsZXM6IFtdXG4gICAgYmxlc3NPbldhdGNoOiB0cnVlXG5cbmV4cG9ydHMucGxhY2Vob2xkZXIgPSAtPlxuICBcIlwiXCJcbiAgXFx0XG4gICNibGVzczpcbiAgIyAgb3B0aW9uczpcbiAgIyAgICBjYWNoZUJ1c3RlcjogdHJ1ZSxcbiAgIyAgICBjbGVhbnVwOiB0cnVlLFxuICAjICAgIGNvbXByZXNzOiBmYWxzZSxcbiAgIyAgICBmb3JjZTogZmFsc2UsXG4gICMgICAgaW1wb3J0czogdHJ1ZVxuICAjICBmaWxlczogW11cbiAgIyAgYmxlc3NPbldhdGNoOiB0cnVlICN0dXJuIHRoaXMgb2ZmIGlmIGl0IGdvZXMgc2xvdyBmb3IgbGFyZ2UgY29kZSBiYXNlcyBkdXJpbmcgd2F0Y2ggbW9kZVxuICBcIlwiXCJcblxuZXhwb3J0cy52YWxpZGF0ZSA9IChjb25maWcsIHZhbGlkYXRvcnMpIC0+XG4gIGVycm9ycyA9IFtdXG4gIHtibGVzc30gPSBjb25maWdcblxuICBvYmplY3ROb3RBcnJheSA9IChvYmopIC0+IChfLmlzT2JqZWN0IG9iaikgYW5kICghXy5pc0FycmF5IG9iailcblxuICB1bmxlc3MgYmxlc3M/IGFuZCBvYmplY3ROb3RBcnJheSBibGVzc1xuICAgIGVycm9ycy5wdXNoIFwiYmxlc3MgY29uZmlnXCJcbiAgICByZXR1cm4gZXJyb3JzXG5cbiAge29wdGlvbnMsIGZpbGVzfSA9IGJsZXNzXG5cbiAgdW5sZXNzIG9wdGlvbnM/IGFuZCBvYmplY3ROb3RBcnJheSBvcHRpb25zXG4gICAgZXJyb3JzLnB1c2ggXCJibGVzcy5vcHRpb25zXCJcbiAgICByZXR1cm4gZXJyb3JzXG5cbiAgdW5sZXNzIGZpbGVzPyBhbmQgXy5pc0FycmF5IGZpbGVzXG4gICAgZXJyb3JzLnB1c2ggXCJibGVzcy5maWxlc1wiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gICNUT0RPOiB2YWxpZGF0ZSBhbGwgZmlsZSBlbnRyaWVzIGFyZSBzdHJpbmdzXG4gICNmb2xkZXIgbmFtZXMgYWxsb3dlZCBvciBlbHNlIGV4YWN0IGZpbGUgcGF0aHMgdG8gaW5kaXZpZHVhbCBmaWxlc1xuXG4gIGVycm9yc1xuIl19
