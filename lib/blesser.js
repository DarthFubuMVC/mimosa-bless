var bless, blessAll, blessCommand, blessFile, checkForBless, cleanBlessed, color, fs, gatherFiles, logger, path, printObj, trackCompletion, wrench, _, _ref;

bless = require('bless');

fs = require('fs');

path = require('path');

logger = require('logmimosa');

color = require('ansi-color').set;

_ = require('lodash');

wrench = require('wrench');

_ref = require('./util'), printObj = _ref.printObj, trackCompletion = _ref.trackCompletion;

blessFile = function(input, output, options, next) {
  if (!fs.existsSync(input)) {
    return logger.warn("mimosa-bless: bless file [[ " + input + " ]] does not exist");
  }
  logger.info("Blessing [[ " + input + " ]]");
  return fs.readFile(input, 'utf-8', function(e, data) {
    var settings;
    if (e) {
      logger.error("blessc: " + e.message);
      next();
    }
    logger.debug("finished reading file[[ " + input + " ]]");
    settings = {
      output: output,
      options: options
    };
    logger.debug("running bless parser on [[ " + input + " ]]");
    return new bless.Parser(settings).parse(data, function(err, files, numSelectors) {
      var numFiles;
      if (err) {
        logger.error("blessc: " + e.message);
        return next();
      } else {
        numFiles = files.length;
        logger.info("Source CSS file [[ " + input + " ]] contained " + numSelectors + " selectors");
        if (numFiles > 1 || input !== output) {
          _.each(files, function(file) {
            var fd;
            fd = fs.openSync(file.filename, 'w');
            return fs.writeSync(fd, file.content, 0, 'utf-8');
          });
          logger.success(" " + numFiles + " CSS files created for " + input);
        } else {
          logger.success("No changes made.");
        }
        return next();
      }
    });
  });
};

cleanBlessed = function(mimosaConfig, options, next) {
  return next();
};

checkForBless = function(mimosaConfig, options, next) {
  return next();
};

gatherFiles = function(filesFromOptions) {
  return _(filesFromOptions).map(function(entry) {
    if (fs.statSync(entry).isDirectory()) {
      return wrench.readdirSyncRecursive(entry).filter(function(f) {
        return (path.extname(f)) === ".css";
      }).map(function(f) {
        return path.join(entry, f);
      });
    } else {
      return [entry];
    }
  }).flatten().uniq().value();
};

blessAll = function(mimosaConfig, options, next) {
  var blessOnWatch, files, finish, isBuild, settings, sources, uniqueInputs;
  isBuild = mimosaConfig.isBuild;
  settings = mimosaConfig.bless.options;
  files = gatherFiles(mimosaConfig.bless.files);
  blessOnWatch = mimosaConfig.bless.blessOnWatch;
  logger.debug("bless files: " + files);
  logger.debug("blessOnWatch: " + blessOnWatch);
  logger.debug("isBuild: " + isBuild);
  if (!(blessOnWatch || isBuild)) {
    next();
    return;
  }
  logger.info("Blessing files");
  sources = _.map(files, function(value, key) {
    var input, output;
    input = _.isString(key) ? key : value;
    output = value;
    return {
      input: input,
      output: output
    };
  });
  uniqueInputs = _.map(sources, function(_arg) {
    var input, output;
    input = _arg.input, output = _arg.output;
    return input;
  });
  finish = trackCompletion("blessSources", uniqueInputs, next);
  return _.each(sources, function(_arg) {
    var input, output;
    input = _arg.input, output = _arg.output;
    return blessFile(input, output, settings, function() {
      return finish(input);
    });
  });
};

blessCommand = function(retrieveConfig) {
  return retrieveConfig(false, function(config) {
    config.isBuild = true;
    return blessAll(config, {}, (function() {}));
  });
};

module.exports = {
  blessAll: blessAll,
  checkForBless: checkForBless,
  cleanBlessed: cleanBlessed,
  blessCommand: blessCommand
};

//# sourceMappingURL=data:application/json;base64,
